
2020-09-10 09:31:51
TypeError('expected string or bytes-like object')
Traceback (most recent call last):
  File "D:\pyproject\gmpsystem\product\models\productmodel.py", line 218, in update_oddmentdrawnotes
    return Oddmentdrawnotes.objects.create(**kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 447, in create
    obj.save(force_insert=True, using=self.db)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\base.py", line 750, in save
    self.save_base(using=using, force_insert=force_insert,
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\base.py", line 787, in save_base
    updated = self._save_table(
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\base.py", line 892, in _save_table
    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\base.py", line 930, in _do_insert
    return manager._insert(
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 1249, in _insert
    return query.get_compiler(using=using).execute_sql(returning_fields)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\compiler.py", line 1394, in execute_sql
    for sql, params in self.as_sql():
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\compiler.py", line 1337, in as_sql
    value_rows = [
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\compiler.py", line 1338, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\compiler.py", line 1338, in <listcomp>
    [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\compiler.py", line 1279, in prepare_value
    value = field.get_db_prep_save(value, connection=self.connection)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\fields\__init__.py", line 823, in get_db_prep_save
    return self.get_db_prep_value(value, connection=connection, prepared=False)
  File "D:\pyproject\gmpsystem\db\models.py", line 35, in get_db_prep_value
    value = self.get_prep_value(value)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\fields\__init__.py", line 1217, in get_prep_value
    return self.to_python(value)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\fields\__init__.py", line 1179, in to_python
    parsed = parse_date(value)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\utils\dateparse.py", line 75, in parse_date
    match = date_re.match(value)
TypeError: expected string or bytes-like object

更新零头登记/发放记录出错
kwargs={"unit": "瓶", "regdate": null, "invaliddate": [null], "amount": "12", "registerid": "001", "registername": "sys02", "ppid": 77}
--------------------
2020-09-10 09:55:04
TypeError("'NoneType' object is not iterable")
Traceback (most recent call last):
  File "D:\pyproject\gmpsystem\product\models\productmodel.py", line 153, in get_oddmentdrawnotes
    res = Oddmentdrawnotes.objects.filter(**kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1358, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1377, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1319, in build_filter
    condition = self.build_lookup(lookups, col, value)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1165, in build_lookup
    lookup = lookup_class(lhs, rhs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\lookups.py", line 24, in __init__
    self.rhs = self.get_prep_lookup()
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\lookups.py", line 219, in get_prep_lookup
    for rhs_value in self.rhs:
TypeError: 'NoneType' object is not iterable

获取零头登记/发放时出错
autoid
args=["batchno", "amount", "unit", "registerid", "registername", "regdate", "invaliddate", "ppid__in", "invaliddate__gte"]
--------------------
2020-09-10 17:18:29
FieldError("Cannot resolve keyword 'flag' into field. Choices are: allowno, autoid, basicamount, basicunit, batchno, bpamount, bpconsdate, bpconstitutorid, bpconstitutorname, bpdate, bpexecutedate, bpexecutorid, bpexecutorname, bpqadate, bpqaid, bpqaname, bpunit, bpwarrantdate, bpwarrantorid, bpwarrantorname, commonname, daykind, deptid, deptname, executedate, executorid, executorname, expireddates, hpunit, instructorid, instructorname, labelimgid, lineid, linename, makedate, medkind, midstatus, mpamount, mpunit, package, planamount, plandate, plflag, pltype, prodid, prodname, prodstatus, productgist, qaauditorid, qaauditorname, qadate, realamount, remark, spamount, spec, spprice, spunit, status, statustime, version, warrantdate, warrantorid, warrantorname, workshopid, workshopname")
Traceback (most recent call last):
  File "D:\pyproject\gmpsystem\product\models\productmodel.py", line 120, in get_producingplan
    res = Producingplan.objects.filter(**kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\manager.py", line 85, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 942, in filter
    return self._filter_or_exclude(False, *args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 962, in _filter_or_exclude
    clone._filter_or_exclude_inplace(negate, *args, **kwargs)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\query.py", line 969, in _filter_or_exclude_inplace
    self._query.add_q(Q(*args, **kwargs))
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1358, in add_q
    clause, _ = self._add_q(q_object, self.used_aliases)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1377, in _add_q
    child_clause, needed_inner = self.build_filter(
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1258, in build_filter
    lookups, parts, reffed_expression = self.solve_lookup_type(arg)
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1084, in solve_lookup_type
    _, field, _, lookup_parts = self.names_to_path(lookup_splitted, self.get_meta())
  File "D:\Anaconda3\envs\py3.8.5\lib\site-packages\django\db\models\sql\query.py", line 1481, in names_to_path
    raise FieldError("Cannot resolve keyword '%s' into field. "
django.core.exceptions.FieldError: Cannot resolve keyword 'flag' into field. Choices are: allowno, autoid, basicamount, basicunit, batchno, bpamount, bpconsdate, bpconstitutorid, bpconstitutorname, bpdate, bpexecutedate, bpexecutorid, bpexecutorname, bpqadate, bpqaid, bpqaname, bpunit, bpwarrantdate, bpwarrantorid, bpwarrantorname, commonname, daykind, deptid, deptname, executedate, executorid, executorname, expireddates, hpunit, instructorid, instructorname, labelimgid, lineid, linename, makedate, medkind, midstatus, mpamount, mpunit, package, planamount, plandate, plflag, pltype, prodid, prodname, prodstatus, productgist, qaauditorid, qaauditorname, qadate, realamount, remark, spamount, spec, spprice, spunit, status, statustime, version, warrantdate, warrantorid, warrantorname, workshopid, workshopname

ProductModel-get_producing获取批记录信息时出错
autoid
args=["prodid", "prodname", "commonname", "spec", "package", "planamount", "basicunit"]
kwargs={"flag": 2}
--------------------